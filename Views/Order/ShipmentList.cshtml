@model Nop.Plugin.Shipping.Manager.Models.Order.ShipmentSearchModel

@{
    Layout = "_AdminLayout";

    //page title
    ViewBag.Title = T("Plugins.Shipping.Manager.Shipments").Text;

    //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Nop.Plugins.Shipping.Manager.Shipments");

    const string hideSearchBlockAttributeName = "CheckoutAttributePage.HideValuesBlock";
    var hideSearchBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSearchBlockAttributeName, defaultValue: true);

    var hideInternationalOperations = "none";
    if (shippingManagerSettings.InternationalOperationsEnabled)
    {
        hideInternationalOperations = "";
    }

    var hideVendorGroups = "none";
    if (Model.AvailableVendorGroups.Count > 0)
    {
        hideVendorGroups = "";
    }

    var usePackingSystem = false;
    if (shippingManagerSettings.UsePackagingSystem)
    {
        usePackingSystem = true;
    }
}

<form asp-controller="OrderOperations" asp-action="ShipmentList" method="post">
    <div class="content-header clearfix">
        <h1 class="float-left">
            @T("Plugins.Shipping.Manager.Shipments")
        </h1>
        <div class="float-right">
            <div class="btn-group">
                <button type="button" class="btn bg-purple">
                    <i class="far fa-file-pdf"></i>
                    @T("Plugins.Shipping.Manager.Admin.PdfReport.PackagingReports")
                </button>
                <button type="button" class="btn bg-purple dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="pdf-exportpackagingreport">
                            @T("Plugins.Shipping.Manager.Shipments.PrintPackagingSlips.All")
                        </button>
                    </li>
                    <li>
                        <button type="submit" name="pdf-exportpackagingslips-all">
                            @T("Admin.Orders.Shipments.PrintPackagingSlips.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportpackagingslips-selected">
                            @T("Admin.Orders.Shipments.PrintPackagingSlips.Selected")
                        </button>
                    </li>
                </ul>
            </div>
            <button type="button" id="package-selected" class="btn bg-orange">
                <i class="fa fa-gift"></i>
                @T("Plugins.Shipping.Manager.Shipment.CreateShipmentSelected")
            </button>
            <button type="button" id="ship-selected" class="btn bg-primary">
                <i class="fa fa-truck"></i>
                @T("Admin.Orders.Shipments.ShipSelected")
            </button>
            <button type="button" id="deliver-selected" class="btn bg-success">
                <i class="fa fa-check-square-o"></i>
                @T("Admin.Orders.Shipments.DeliverySelected")
            </button>
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.OrderShipmentListButtons })
        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            @await Component.InvokeAsync("VendorScopeConfiguration")
            <div class="cards-group">
                <div class="card card-default card-search">
                    <div class="card-body">
                        <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideSearchBlock ? "closed" : "")">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="StartDate" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-editor asp-for="StartDate" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="EndDate" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-editor asp-for="EndDate" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="TrackingNumber" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-editor asp-for="TrackingNumber" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="WarehouseId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="WarehouseId" asp-items="Model.AvailableWarehouses" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="CarrierId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="CarrierId" asp-items="Model.AvailableCarriers" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="ShippingMethodId" />
                                        </div>
                                        <div class="col-md-6">
											<nop-select asp-for="ShippingMethodId" asp-items="Model.AvailableShippingMethods" onchange="updateShippingMethod(this)" />
											<input asp-for="ShippingMethod" type="hidden" width="100px" />
                                        </div>
                                    </div>
                                    <div class="form-group row" style="display:@hideVendorGroups">
                                        <div class="col-md-4">
                                            <nop-label asp-for="VendorGroupId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="VendorGroupId" asp-items="Model.AvailableVendorGroups" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group row" style="display:@hideInternationalOperations">
                                        <div class="col-md-4">
                                            <nop-label asp-for="CountryId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="CountryId" asp-items="Model.AvailableCountries" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="StateProvinceId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="StateProvinceId" asp-items="Model.AvailableStates" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="County" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-editor asp-for="County" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="City" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-editor asp-for="City" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="CustomerId" />
                                        </div>
                                        <div class="col-md-6">
                                            <nop-select asp-for="CustomerId" asp-items="Model.AvailableCustomers" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="ShippingAddressId" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-select asp-for="ShippingAddressId" asp-items="Model.AvailableShippingAddress" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="DontDisplayShipped" />
                                        </div>
                                        <div class="col-md-1">
                                            <nop-editor asp-for="DontDisplayShipped" />
                                        </div>
                                        <div class="col-md-4">
                                            <nop-label asp-for="DontDisplayDelivered" />
                                        </div>
                                        <div class="col-md-1">
                                            <nop-editor asp-for="DontDisplayDelivered" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="text-center col-12">
                                    <button type="button" id="search-shipments" class="btn btn-primary btn-search">
                                        <i class="fas fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <div class="card card-default">
                <div class="card-body">                        
                    @await Html.PartialAsync("Table", new DataTablesModel
                    {
                        Name = "shipments-grid",
                        UrlRead = new DataUrl("ShipmentList", "OrderOperations", null),
                        SearchButtonId = "search-shipments",
                        PrimaryKeyColumn = nameof(ShipmentModel.Id),
                        Length = Model.PageSize,
                        LengthMenu = Model.AvailablePageSizes,
                        Filters = new List<FilterParameter>
                        {
                            new FilterParameter(nameof(Model.StartDate)),
                            new FilterParameter(nameof(Model.EndDate)),
                            new FilterParameter(nameof(Model.TrackingNumber)),
                            new FilterParameter(nameof(Model.ShippingMethod)),
                            new FilterParameter(nameof(Model.CustomerId)),
                            new FilterParameter(nameof(Model.ShippingAddressId)),
                            new FilterParameter(nameof(Model.CountryId)),
                            new FilterParameter(nameof(Model.StateProvinceId)),
                            new FilterParameter(nameof(Model.County)),
                            new FilterParameter(nameof(Model.City)),
                            new FilterParameter(nameof(Model.WarehouseId)),
                            new FilterParameter(nameof(Model.CarrierId)),
                            new FilterParameter(nameof(Model.VendorGroupId)),
                            new FilterParameter(nameof(Model.DontDisplayShipped), typeof(bool)),
                            new FilterParameter(nameof(Model.DontDisplayDelivered), typeof(bool))
                        },
                        ColumnCollection = new List<ColumnProperty>
                        {
                            new ColumnProperty(null)
                            {
                                Render = new RenderChildCaret(),
                                Width = "5",
                                Searchable = false,
                                ClassName =  NopColumnClassDefaults.ChildControl,
                            },
                            new ColumnProperty(nameof(ShipmentModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_shipments"),
                                Searchable = false,
                                Width = "10",
                            },
                            new ColumnProperty(nameof(ShipmentModel.Id))
                            {
                                Title = T("Admin.Orders.Shipments.Id").Text,
                                Width = "40"
                            },
                            new ColumnProperty(nameof(ShipmentModel.CustomOrderNumber))
                            {
                                Title = T("Admin.Orders.Shipments.CustomOrderNumber").Text,
                                Width = "50"
                            },
                            new ColumnProperty(nameof(ShipmentModel.TrackingNumber))
                            {
                                Title = T("Admin.Orders.Shipments.TrackingNumber").Text,
                                Width = "100"
                            },
                            new ColumnProperty(nameof(ShipmentModel.TotalWeight))
                            {
                                Title = T("Admin.Orders.Shipments.TotalWeight").Text,
                                Width = "60"
                            },
                            new ColumnProperty(nameof(ShipmentModel.ShippedDate))
                            {
                                Title = T("Admin.Orders.Shipments.ShippedDate").Text,
                                Width = "60"
                            },
                            new ColumnProperty(nameof(ShipmentModel.DeliveryDate))
                            {
                                Title = T("Admin.Orders.Shipments.DeliveryDate").Text,
                                Width = "60"
                            },
                            new ColumnProperty(nameof(ShipmentModel.Id))
                            {
                                Title = T("Admin.Common.View").Text,
                                Width = "50",
                                ClassName = NopColumnClassDefaults.Button,
                                Render = new RenderButtonView(new DataUrl("~/Admin/OrderOperations/ShipmentDetails/"))
                            }
                        },
                        ChildTable = new DataTablesModel
                        {
                            Name = "shipments-grid",
                            UrlRead = new DataUrl("ShipmentsItemsByShipmentId", "OrderOperations", null),
                            IsChildTable = true,
                            Paging = false,
                            Length = Model.PageSize,
                            LengthMenu = Model.AvailablePageSizes,
                            Filters = new List<FilterParameter>
                            {
                                new FilterParameter(nameof(ShipmentItemSearchModel.ShipmentId), nameof(ShipmentModel.Id), true)
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                                new ColumnProperty(nameof(ShipmentItemModel.ProductName))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.ProductName").Text,
                                    Width = "200",
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.ShippedFromWarehouse))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.Warehouse").Text,
                                    Width = "150"
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.QuantityOrdered))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.QtyOrdered").Text,
                                    Width = "100"
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.QuantityInThisShipment))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.QtyShipped").Text,
                                    Width = "100"
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.ItemWeight))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.ItemWeight").Text,
                                    Width = "100"
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.ItemDimensions))
                                {
                                    Title = T("Admin.Orders.Shipments.Products.ItemDimensions").Text,
                                    Width = "150"
                                },
                                new ColumnProperty(nameof(ShipmentItemModel.Id))
                                {
                                    Title = T("Plugins.Shipping.Manager.Delivery.Shipment").Text,
                                    Width = "50",
                                    ClassName =  NopColumnClassDefaults.Button,
                                    Render = new RenderCustom("renderShipmentEditUrl")
                                },
                            }
                        }
                    })                  
                </div>
            </div>
            <script>
                function renderShipmentEditUrl(data, type, row, meta) {
                    return '<button onclick=\"javascript:OpenWindow(\'@Url.RouteUrl("Nop.Plugins.Shipping.Manager.EditShipmentPopup")?Id='
                        + data + '&btnId=btnRefreshOrderShipments\', 1000, 650, true); return false;\" class="btn btn-default"><i class="fa fa-pencil"></i>@T("Plugins.Shipping.Manager.Sales.EditShipment")</button>';
                    }
                    $(document).ready(function() {
                        //load states when changing a country dropdownlist
                        $("#@Html.IdFor(model => model.CountryId)").change(function() {
                            var selectedItem = $(this).val();
                            var ddlStates = $("#@Html.IdFor(model => model.StateProvinceId)");
                            $.ajax({
                                cache: false,
                                type: "GET",
                                url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                                data: {
                                    "countryId": selectedItem,
                                    "addAsterisk": "true"
                                },
                                success: function (data, textStatus, jqXHR) {
                                    ddlStates.html('');
                                    $.each(data, function(id, option) {
                                        ddlStates.append($('<option></option>').val(option.id).html(option.name));
                                    });
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    $("#statesAlert").click();
                                }
                            });
                        });

                        //"create package" button
                        $('#package-selected').click(function(e) {
                            e.preventDefault();

                            var postData = {
                                selectedIds: selectedIds
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@(Url.Action("SetAsPackageSelected", "OrderOperations"))",
                                data: postData,
                                traditional: true,
                                success: function (data) {
                                    if (data.Success) {
                                        updateTable('#shipments-grid');
                                    }
                                    else {
                                        alert(data.Message);
                                    }
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    $('#setAsPackageSelectedFailed-info').text(errorThrown);
                                    $("#setAsPackageSelectedFailed").click();
                                },
                                complete: function (jqXHR, textStatus) {
                                    updateTable('#shipments-grid');
                                }
                            });
                            return false;
                        });

                        //"ship selected" button
                        $('#ship-selected').click(function(e) {
                            e.preventDefault();

                            var postData = {
                                selectedIds: selectedIds
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@(Url.Action("SetAsShippedSelected", "OrderOperations"))",
                                data: postData,
                                traditional: true,
                                error: function (jqXHR, textStatus, errorThrown) {
                                    $('#setAsShippedSelectedFailed-info').text(errorThrown);
                                    $("#setAsShippedSelectedFailed").click();
                                },
                                complete: function (jqXHR, textStatus) {
                                    updateTable('#shipments-grid');
                                }
                            });
                            return false;
                        });

                        //"deliver selected" button
                        $('#deliver-selected').click(function(e) {
                            e.preventDefault();

                            var postData = {
                                selectedIds: selectedIds
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@(Url.Action("SetAsDeliveredSelected", "OrderOperations"))",
                                data: postData,
                                traditional: true,
                                error: function (jqXHR, textStatus, errorThrown) {
                                    $('#setAsDeliveredSelectedFailed-info').text(errorThrown);
                                    $("#setAsDeliveredSelectedFailed").click();
                                },
                                complete: function (jqXHR, textStatus) {
                                    updateTable('#shipments-grid');
                                }
                            });
                            return false;
                        });

                        $('#btnRefreshOrderShipments').click(function () {
                            //refresh grid
                            updateTable('#shipments-grid');

                            //return false to don't reload a page
                            return false;
                        });
                    });

            </script>
            </div>
        </div>
    </div>
</form>

<form asp-controller="OrderOperations" asp-action="PdfPackagingSlipSelected" method="post" id="pdf-packaging-slip-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
    <input type="submit" id="btnRefreshOrderShipments" style="display: none" />
</form>

<nop-alert asp-alert-id="statesAlert" asp-alert-message="@T("Admin.Common.Alert.States.Failed")" />
<nop-alert asp-alert-id="setAsShippedSelectedFailed" />
<nop-alert asp-alert-id="setAsDeliveredSelectedFailed" />
<nop-alert asp-alert-id="setAsPackageSelectedFailed" />

<script>
    $(document).ready(function () {
        $('#exportpackagingslips-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#pdf-packaging-slip-selected-form #selectedIds').val(ids);
            $('#pdf-packaging-slip-selected-form').submit();
            updateTable('#shipments-grid');
            return false;
        });
    });

	function updateShippingMethod(element) {
		var text = element.options[element.selectedIndex].text;
		$("#ShippingMethod").val(text);
	}

</script>
